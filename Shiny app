#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(tidyverse)
library(ggpubr)
library(tidyquant)
library(forecast)
library(ggrepel)
library(formattable)
library(gridExtra)
library(ggthemes)

#Data 


CovidFaelle_Timeline <- read_delim("https://covid19-dashboard.ages.at/data/CovidFaelle_Timeline.csv",
                                   ";",
                                   escape_double = FALSE,
                                   #n_max = 3000 ,
                                   col_types = NULL
)

CovidFallzahlen <- read_delim("https://covid19-dashboard.ages.at/data/CovidFallzahlen.csv",
                              ";",
                              escape_double = FALSE,
                              #n_max = 3000 ,
                              col_types = NULL,
                              
)

#mutations
data<-CovidFaelle_Timeline %>%
    mutate(Time = as.Date(Time, "%d.%m.%Y%H:%M:%S"))%>%
    mutate(Bundesland = as.factor(Bundesland))%>%
    mutate(SiebenTageInzidenzFaelle = as.numeric((gsub(",", ".", gsub("\\.", "", SiebenTageInzidenzFaelle)))))

tests.data<-CovidFallzahlen %>%
    mutate(Time = as.Date(MeldeDatum, "%d.%m.%Y%H:%M:%S"))%>%
    mutate(Bundesland = str_replace(Bundesland, "Alle", "Ãsterreich"))%>%
    mutate(Bundesland = as.factor(Bundesland))

joined.data<-full_join(data,tests.data,by = c("Time", "Bundesland", "BundeslandID"))

joined.data.diff.all<-joined.data%>%
    group_by(BundeslandID)%>%
    mutate(AnzahlFaelle.mean = rollmean(AnzahlFaelle,k = 7, fill = NA, align = "right"))%>%
    mutate(freq.vs.mean=(AnzahlFaelle.mean-AnzahlFaelle))%>% 
    mutate(AnzahlFaelle7Tage.pD = (AnzahlFaelle7Tage/7))%>%
    mutate(dtest=c(NA, diff(TestGesamt)))%>%
    mutate(pos.rate=(((AnzahlFaelle)/dtest)*100))%>%
    mutate(pos.rate = ifelse(is.infinite(pos.rate), NA, pos.rate))%>%
    mutate(pos.rate = round(pos.rate,2))%>%
    mutate(pos.rate.mean =rollapply(pos.rate,7, mean, na.rm = TRUE, by = 1, partial = TRUE, align = "right"))%>%
    mutate(dtest.mean = rollmean(dtest,k = 7, fill = NA, align = "right"))%>%
    mutate(increase = 100*((c(NA, diff(AnzahlFaelle.mean)))/AnzahlFaelle.mean))%>% 
    mutate(increase.mean = rollmean(increase,k = 7, fill = NA, align = "right"))%>%
    mutate(ICU.Auslastung=100*(FZICU/(FZICU+FZICUFree)))
    
   # filter(row_number() <= n()-1) #last day data incomplete only until 2pm




joined.data.diff.wien<-joined.data.diff.all%>%filter(Bundesland == 'Wien')




# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel(h1("Ãsterreichische COVID Datenauswertung basierend auf AGES Daten",
                  h2( "Stand", max(joined.data.diff.all$Time),
                  h5("v_20-11-11",
                  h6(a("Skript zur Berechnung und Darstellung",href="https://github.com/akgfelice/COVID.data.Austria.git")))))),

         # Show a plot of the generated distribution
        mainPanel(
           plotOutput("Anzahl.mean"),
           plotOutput("inzidenz"),
           plotOutput("increase.rate"),
           plotOutput("ICU"),
           plotOutput("pos.rate")
         
        )
    )


server <- function(input, output) {

    output$Anzahl.mean <- renderPlot({
        ggplot()+
            
            labs(title="Log-FÃ¤lle (Punkte: 7 Tages Durchschnitt, Linie: tÃ¤gliche FÃ¤lle, Durchmesser-Punkte: PositivitÃ¤tsrate)",
                 y= "TÃ¤gliche FÃ¤lle [log]",
                 x= "Datum",
                 size="PositivitÃ¤srate")+
            
            geom_point(data = joined.data.diff.all,
                       aes(x= Time, y=AnzahlFaelle7Tage/7, color=Bundesland,order=BundeslandID,
                           size=pos.rate.mean ))+
            scale_radius(range = c(0, 6))+
            
            xlim(Sys.Date()-28,Sys.Date()+5)+
            scale_y_continuous(trans = 'log10',limits =c(10,10000))+
            annotation_logticks(sides="lb")+
            
            geom_line(data=joined.data.diff.all,
                      aes(x=Time, y=AnzahlFaelle, color=Bundesland,order=BundeslandID))+
            
            geom_text_repel(aes(x= Time, y=AnzahlFaelle7Tage/7,                label=formatC((AnzahlFaelle7Tage/7),digits=1,format ="f"),
                                color=Bundesland),
                            data=joined.data.diff.all%>%filter(Time == max(Time)),
                            #direction = "y",
                            xlim = Sys.Date()+3,
                            min.segment.length = unit(0, 'lines'),
                            show.legend = FALSE,
                            segment.color = "black",
                            segment.alpha = 0.2
                            )+ 
            
            scale_colour_brewer(palette = "Paired")
           
    })
    
    output$inzidenz <- renderPlot({
        ggplot()+
            
            labs(title="7 Tages Inzidenz",
                 y= "7Tage Inzidenz",
                 x= "Datum",
                 size="PositivitÃ¤srate")+
            
            geom_point(data = joined.data.diff.all,aes(x= Time, y= SiebenTageInzidenzFaelle, color=Bundesland,
                                                       size=pos.rate.mean))+
            scale_radius(range = c(0, 6))+
            xlim(Sys.Date()-28,Sys.Date()+5)+
            #ylim(0,500)+
            
            geom_text_repel(aes(x= Time, y= SiebenTageInzidenzFaelle, label=formatC(SiebenTageInzidenzFaelle,digits=2,format = "f"),
                                color=Bundesland),
                            data=joined.data.diff.all%>%filter(Time == max(Time)),
                            xlim = Sys.Date()+2,
                            show.legend = FALSE,
                            min.segment.length = unit(0, 'lines'),
                            segment.color = "black",
                            segment.alpha = 0.2
                            )+
            scale_colour_brewer(palette = "Paired")
            
    })
    
    output$ICU <- renderPlot({
      ggplot()+
        labs(title="Intensivbettenauslastung",
             y= "% Auslastung",
             x= "Datum"
             )+
        geom_step(data = joined.data.diff.all,
                  aes(x= Time, y=ICU.Auslastung, color=Bundesland
                  ), size=1.5,
                  
        )+
        xlim(Sys.Date()-28,Sys.Date()+5)+
        
        
        
        geom_text_repel(data=joined.data.diff.all%>%filter(Time == max(Time)),
                        aes(x= Time, y=ICU.Auslastung,               
                            label=formatC((ICU.Auslastung),digits=1,format ="f"),
                            color=Bundesland),
                        xlim = Sys.Date()+3,
                        min.segment.length = unit(0, 'lines'),
                        show.legend = FALSE,
                        segment.color = "black",
                        segment.alpha = 0.2
                        
        )+ 
        #ylim(-5,1.25*max(tail(joined.data.diff.all$ICU.Auslastung,10)))+
        scale_colour_brewer(palette = "Paired")
      
    }) 
  
    output$increase.rate <- renderPlot({
        ggplot()+
            labs(title="tÃ¤gliche Steigerungsrate in %",
                 y= "tÃ¤gliche Steigerung in %",
                 x= "Zeit")+
            geom_point(data = joined.data.diff.all,
                       aes(x= Time, y=increase.mean, color=Bundesland,
                           #size=pos.rate.mean
                       ))+
            #scale_size(range = c(0, 10))+
            #scale_size_area(max_size = 10)+
            scale_radius(range = c(0, 6))+
            xlim(Sys.Date()-28,Sys.Date()+5)+
            # scale_y_continuous(trans = 'log10',limits =c(10,4000))+
            # annotation_logticks(sides="lb")+
            
            geom_line(data=joined.data.diff.all,
                      aes(x=Time, y=increase.mean, color=Bundesland), alpha=0.3)+
            
            geom_text_repel(aes(x= Time, y=increase.mean,               
                                label=formatC((increase.mean),digits=1,format ="f"),
                                color=Bundesland),
                            data=joined.data.diff.all%>%filter(Time == max(Time)),
                            #direction = "y",
                            xlim = Sys.Date()+3,
                            min.segment.length = unit(0, 'lines'),
                            show.legend = FALSE,
                            segment.color = "black",
                            segment.alpha = 0.2
            )+ 
            ylim(1.25*min(tail(joined.data.diff.all$increase.mean,10)),1.25*max(tail(joined.data.diff.all$increase.mean,10)))+
            scale_colour_brewer(palette = "Paired")
           
    })
    
    output$pos.rate <- renderPlot({
        ggplot(data = joined.data.diff.all)+
            labs(title="PositivitÃ¤tsraten",
                 y= "PositivitÃ¤tsraten",
                 x= "Zeit")+
            geom_line(aes(x= Time, y=pos.rate.mean, color= Bundesland))+
            geom_point(aes(x= Time, y=pos.rate.mean, color= Bundesland,
                           #size=pos.rate.mean))+
                           #scale_radius(range = c(0, 8)
            ))+
            
            
            
        geom_text_repel(
          aes(
            x = Time,
            y = pos.rate.mean,
            label = formatC(pos.rate.mean, digits = 1, format = "f"),
            color = Bundesland
          ),
          data = joined.data.diff.all %>% filter(Time == max(Time)),
          min.segment.length = unit(0, 'line'),
          xlim = Sys.Date() + 2,
          show.legend = FALSE,
          segment.color = "black",
          segment.alpha = 0.2

        )+
            #geom_smooth(aes(x= Time, y=pos.rate, color= Bundesland))+ 
            xlim(Sys.Date()-28,Sys.Date()+5)+
            ylim(0,NA)+
            scale_colour_brewer(palette = "Paired")
          
    })
  

}

# Run the application 
shinyApp(ui = ui, server = server)
